#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('5-0:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// ソケットを作る
var io = require('socket.io').listen(server);

let cnt = 0;
const obj = [
    {problem: '3 x 4= ?', ans: 12},
    {problem: '5 x 3= ?', ans: 15},
    {problem: '7 x 7= ?', ans: 49}
];

// クライアントが接続してきたときの処理
io.sockets.on('connection', (socket) => {

    socket.on('usrName_from_client', (userName) => {
        // データの保持
        socket.userName = userName;
        socket.emit('usrName_from_client', obj[cnt].problem);
    });

    // メッセージを受けたときの処理
    socket.on('clientMsg', (msg) => {
        if( obj[cnt].ans === parseInt(msg) ){
            cnt++;
            if(cnt === obj.length){
                cnt = 0;
            }

            let ansObj = {};
            ansObj.name = '${socket.userName}さんが正解しました';
            ansObj.problem = obj[cnt].problem;

            socket.emit('pushMsg', ansObj);
            socket.broadcast.emit('pushMsg', ansObj);
        }
    });

    // クライアントが切断したときの処理
    socket.on('disconnect', function(){
        console.log('${socket.userName}が切断しました。');
    });

});