#!/usr/bin/env node
"use strict"

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('5-1_room:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var io = require('socket.io').listen(server);
io.sockets.on('connection', (socket) => {
    
    socket.on('clietToServer', (data) => {
        // let : スコープがブロックスコープになる
        let str = '全体メッセージ : ' + data;
        socket.emit('serverToClient', str);
        socket.broadcast.emit('serverToClient', str);
    });
    
    // ルームに入る処理
    socket.on('join', () => {
        console.log(socket.rooms);
        socket.join('roomA');
    });
    
    
    // ルームから退出
    socket.on('leave', () => {
        socket.leave('roomA');
    });
    
    // ルームに対してデータを送信する
    socket.on('roomSend', (data) => {
        // 自分と自分以外に送信
        io.to('roomA').emit('serverToClient', 'roomAからのメッセージ : ' + data);
        
        // 自分以外に送信
        // socket.to('roomA').emit('serverToClient', 'roomAからのメッセージ : ' + data);
    });
    
});






